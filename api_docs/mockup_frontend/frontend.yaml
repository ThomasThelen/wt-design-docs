info:
  title: WholeTale REST API
  version: '1.0'
swagger: '2.0'
consumes:
- application/json
produces:
- application/json
basePath: "/v1"
tags:
- name: recipe
definitions:
  folder:
    type: object
    description: |
      Folders are used to store items and can also store other folders in
      a hierarchical way, like a directory on a filesystem.
    properties:
      _id:
        type: string
        description: A unique internal identifier.
      name:
        type: string
      lowerName:
        type: string
      public:
        type: boolean
      description:
        type: string
      created:
        type: string
        format: date-time
      updated:
        type: string
        format: date-time
      size:
        type: integer
      meta:
        type: object
      parentId:
        type: string
      parentCollection:
        type: string
      creatorId:
        type: string
      baseParentType:
        type: string
      baseParentId:
        type: string
  dataMap:
    type: object
    description: A container with a basic information about a set of external data resources.
    properties:
      dataId:
        type: string
        description: External dataset identificator, such as URL.
      repository:
        type: string
        description: Name of a data repository holding the dataset.
      doi:
        type: string
        description: Digital Object Identifier
      name:
        type: string
        description: A user-friendly name. Defaults to the name provided by an external repository.
      size:
        type: integer
        description: Size of the dataset in bytes.
  containerConfig:
    type: object
    description: Set of parameters required to instantiate a Tale
    properties:
      port:
        type: integer
      command:
        type: string
      cpuShares:
        type: string
      memLimit:
        type: string
      user:
        type: string
  containerInfo:
    type: object
    description: Set of properties of an instantiated Tale
    properties:
      created:
        type: string
        format: date-time
      containerId:
        type: string
      mountPoint:
        type: string
  recipe:
    properties: 
      _id:
        type: string
        description: unique identifier
      name:
        type: string
      description:
        type: string
      url:
        type: string
        description: >
          a URL of an external vcs repository containing all the data required to build an image.
      commitId:
        type: string
        description: An immutable commit identifier
      tags:
        type: array
        items:
          type: string
        description: A human readable identification of the Recipe.
        default: [latest]
      parentId:
        type: string
        description: ID of a previous version of the Recipe
      created:
        type: string
        format: date-time
        description: The time when the recipe was created.
      updated:
        type: string
        format: date-time
        description: The last time when the recipe was modified.
    description: Object representing data required to build an Image.
    required:
    - _id
    - name
    - url
    - commitId
    - tags
  image:
    description: Object representing a WT Image.
    required:
    - _id
    - fullName
    - status
    - recipeId
    - digest
    - tags
    - parentId
    properties:
      _id:
        type: string
        description: internal unique identifier
      name:
        type: string
        description: A user-friendly name
      fullName:
        type: string
        description: >
          'An image name following docker format: namespace/repository(@digest)'
      description:
        type: string
      config:
        $ref: '#/definitions/containerConfig'
      recipeId:
        type: string
        description: A recipe used to build the image.
      digest:
        type: string
        description: >
          Checksum of a successfully built image that can be used to
          pull a specific version of the image.
      tags:
        type: array
        items:
          type: string
        description: A human readable identification of the Recipe.
        default: [latest]
      parentId:
        type: string
        description: ID of a previous version of the Image
      status:
        type: string
        default: unavailable
        description: Status of the image.
        enum:
        - invalid
        - unavailable
        - building
        - available
      public:
        type: boolean
        default: true
        description: If set to true image can be accessed by anyone
      created:
        type: string
        format: date-time
        description: The time when the image was created.
      updated:
        type: string
        format: date-time
        description: The last time when the image was modified.
  tale:
    description: Object representing a Tale.
    required:
    - _id
    - folderId
    - imageId
    properties:
      _id:
        type: string
        description: internal unique identifier
      name:
        type: string
        description: A user-friendly name
      description:
        type: string
      imageId:
        type: string
        description: ID of a WT Image used by the Tale
      folderId:
        type: string
        description: ID of a data folder used by the Tale
      public:
        type: boolean
        description: If set to true the Tale is accessible by anyone.
        default: True
      published:
        type: boolean
        default: False
        description: If set to true the Tale cannot be deleted or made unpublished.
      config:
        $ref: '#/definitions/containerConfig'
      created:
        type: string
        format: date-time
        description: The time when the tale was created.
      updated:
        type: string
        format: date-time
        description: The last time when the tale was modified.
  instance:
    description: Object representing a WT Instance.
    required:
    - _id
    - taleId
    - containerInfo
    - lastActivity
    - url
    - status
    properties:
      _id:
        type: string
        description: internal unique identifier
      userId:
        type: string
        description: ID of the owner
      taleId:
        type: string
        description: ID of a Tale the Instance
      containerInfo:
        $ref: '#/definitions/containerInfo'
      lastActivity:
        type: string
        format: date-time
        description: Time when the Instance was last accessed
      name:
        type: string
        description: A user-friendly name
      url:
        type: string
        description: URL allowing to access the Instance
      status:
        type: string
        default: inactive
        description: Status
        enum:
        - starting
        - running
        - paused
        - failed
        - inactive
paths:
  /recipe:
    get:
      tags:
      - recipe
      summary: Returns all recipes from the system that user has access to
      description: Results of the search can be filtered by specifying query arguments.
      operationId: demo.getRecipes
      produces:
      - application/json
      responses:
        '200':
          description: A list of recipes
          schema:
            type: array
            items:
              $ref: '#/definitions/recipe'
        '403':
          description: Read access was denied on the parent recipe
      parameters:
      - name: parentId
        in: query
        description: Search all descendants of the recipe with this parentId
        required: false
        type: string
      - name: text
        in: query
        description: Perform a full text search for recipe with matching name or description.
        type: string
      - name: tag
        in: query
        type: string
        description: Search all recipes with a given tag.
      - name: limit
        in: query
        default: 50
        description: Result set size limit.
        type: integer
      - name: offset
        in: query
        default: 0
        description: Offset into result set.
        type: integer
      - name: sort
        in: query
        description: Field to sort the result set by.
        default: lowerName
        type: string
      - name: sortdir
        in: query
        description: 'Sort order: 1 for ascending, -1 for descending.'
        default: 1
        type: integer
        enum:
        - -1
        - 1
    post:
      tags:
      - recipe
      summary: Create a new recipe.
      description: Allows to create a new WT recipe from external git repository
      operationId: demo.createRecipe
      produces:
      - application/json
      responses:
        '200':
          description: Successfully created a recipe.
          schema:
            $ref: '#/definitions/recipe'
        '400':
          description: Query parameter was invalid
      parameters:
      - name: name
        in: query
        type: string
        description: The name of the recipe, e.g. My Research Environment, defaults to repository name.
      - name: description
        type: string
        in: query
        description: Human readable description of the recipe.
      - name: url
        type: string
        in: query
        required: true
        description: >
          a URL of an external vcs repository containing all the data required to build an image.
      - name: commitId
        in: query
        type: string
        required: true
        description: An immutable commit identifier
      - name: tags
        type: array
        items:
          type: string
        in: query
        description: A human readable labels of the Recipe.
        default: [latest]
  /recipe/{id}:
    get:
      tags:
      - recipe
      summary: Get a recipe by ID.
      description: tbd
      operationId: demo.getRecipeByID
      produces:
      - application/json
      responses:
        '200':
          description: A selected recipe
          schema:
            $ref: '#/definitions/recipe'
        '403':
          description: Read access was denied for the recipe.
        '400':
          description: ID was invalid
      parameters:
      - name: id
        in: path
        description: ID of the recipe to get
        required: true
        type: string
    put:
      tags:
      - recipe
      summary: Edit a recipe
      description: 'Modify mutable attributes of a recipe, such as: name, tag, description.'
      operationId: demo.updateRecipeByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/recipe'
        '403':
          description: Read/write access was denied for the recipe.
        '400':
          description: ID was invalid.
        '409':
          description: Tag already exists.
      parameters:
      - name: id
        in: path
        description: ID of the recipe to modify
        required: true
        type: string
      - name: name
        in: query
        description: Name of the recipe
        type: string
      - name: description
        in: query
        description: Description for the recipe
        type: string
      - name: tags
        type: array
        items:
          type: string
        description: A human readable labels for the Recipe.
        default: [latest]
        in: query
    post:
      summary: Create a copy of a recipe
      description: Create a copy of a recipe preserving original URL.
      operationId: demo.copyRecipe
      tags:
      - recipe
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/recipe'
        '403':
          description: Read/write access was denied for the recipe.
        '400':
          description: ID was invalid
      parameters:
      - name: id
        in: path
        description: ID of the recipe to copy
        required: true
        type: string
      - name: name
        in: query
        description: Name of the recipe
        type: string
      - name: description
        in: query
        description: Description for the recipe
        type: string
      - name: tags
        description: A human readable labels for the Recipe.
        default: [latest]
        in: query
        type: array
        items:
          type: string
      - name: commitId
        type: string
        description: An immutable commit identifier
        in: query
  /image:
    get:
      tags:
      - image
      summary: Returns all images from the system that user has access to
      operationId: demo.getImages
      produces:
      - application/json
      parameters:
      - name: recipeId
        in: query
        type: string
        description: ID of a recipe used to build the image
        required: false
      - name: text
        in: query
        description: Perform a full text search for recipe with matching name or description.
        type: string
      - name: tag
        in: query
        type: string
        description: Search all recipes with a given tag.
      - name: limit
        in: query
        default: 50
        description: Result set size limit.
        type: integer
      - name: offset
        in: query
        default: 0
        description: Offset into result set.
        type: integer
      - name: sort
        in: query
        description: Field to sort the result set by.
        default: lowerName
        type: string
      - name: sortdir
        in: query
        description: 'Sort order: 1 for ascending, -1 for descending.'
        default: 1
        type: integer
        enum:
        - -1
        - 1
      responses:
        '200':
          description: A list of images
          schema:
            type: array
            items:
              $ref: '#/definitions/image'
        '403':
          description: Read access was denied on the parent recipe
    post:
      summary: Create a new image
      description: Create a new image using a recipe
      operationId: demo.createImage
      tags:
      - image
      produces:
      - application/json
      parameters:
      - name: recipeId
        in: query
        type: string
        description: ID of a recipe used to build the image
        required: true
      - name: fullName
        in: query
        type: string
        description: An image name conforming to docker standard
        required: true
      - name: name
        in: query
        description: A user-friendly, short name of the image
        type: string
        required: false
      - name: description
        in: query
        description: Description for the image
        type: string
        required: false
      - name: tags
        in: query
        type: array
        items:
          type: string
        description: A human readable labels for the Image.
        default: [latest]
        required: false
      - name: public
        type: boolean
        required: false
        in: query
      - name: config
        in: body
        schema:
          $ref: '#/definitions/containerConfig'
      responses:
        '200':
          description: A new image
          schema:
            $ref: '#/definitions/image'
        '400':
          description: Query parameter was invalid
        '403':
          description: Read access was denied on the parent recipe
  /image/{id}:
    get:
      tags:
      - image
      summary: Return an image by ID.
      operationId: demo.getImageByID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the image to get.
        required: true
        type: string
      responses:
        '200':
          description: A selected image.
          schema:
            $ref: '#/definitions/image'
        '403':
          description: Read access was denied for the image.
        '400':
          description: ID was invalid.
    put:
      tags:
      - image
      summary: Edit an image
      description: 'Modify mutable attributes of an image, such as: name, tags, description.'
      operationId: demo.updateImageByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/image'
        '403':
          description: Read/write access was denied for the image.
        '400':
          description: ID was invalid.
        '409':
          description: Tag already exists.
      parameters:
      - name: id
        in: path
        description: ID of the image to modify
        required: true
        type: string
      - name: name
        in: query
        description: Name of the recipe
        type: string
      - name: description
        in: query
        description: Description for the recipe
        type: string
      - name: tags
        type: array
        items:
          type: string
        description: A human readable labels for the Recipe.
        default: [latest]
        in: query
      - name: status
        in: query
        type: string
        default: unavailable
        description: Status of the image.
        enum:
        - invalid
        - unavailable
        - building
        - available
      - name: public
        in: query
        type: boolean
        required: False
      - name: config
        in: body
        schema:
          $ref: '#/definitions/containerConfig'
  /image/{id}/copy:
    post:
      summary: Create a copy of an image using an updated recipe
      description: Create a copy of an image preserving original fullName. Operation will only succeed if the new recipe is a descendant of the recipe used by the original image.
      operationId: demo.updateImage
      tags:
      - image
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/image'
        '403':
          description: Read/write access was denied for the image.
        '400':
          description: ID was invalid or the recipe is not a descendant.
      parameters:
      - name: id
        in: path
        description: ID of the image to copy
        required: true
        type: string
      - name: recipeId
        in: query
        description: ID of the new recipe
        type: string
        required: true
  /image/{id}/build:
    put:
      tags:
      - image
      summary: Build an image
      description: 'Initiate process of building the image and pushing it to an external Docker Registry. Changes the status of the image and ultimately its digest.'
      operationId: demo.buildImageByID
      produces:
      - application/json
      responses:
        '202':
          description: Build started
          schema:
            $ref: '#/definitions/image'
        '400':
          description: ID was invalid
      parameters:
      - name: id
        in: path
        description: ID of the image to build
        required: true
        type: string
  /image/{id}/check:
    put:
      tags:
      - image
      summary: Update/verify the status of the image
      description: 'Verify that the image is available in a Docker Registry and set its status accordingly.'
      operationId: demo.checkImageByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/image'
        '400':
          description: ID was invalid
      parameters:
      - name: id
        in: path
        description: ID of the image to check
        required: true
        type: string
  /tale:
    get:
      tags:
      - tale
      summary: Returns all tales from the system that user has access to
      description: Results of the search can be filtered by specifying query arguments.
      operationId: demo.getTales
      produces:
      - application/json
      parameters:
      - name: imageId
        in: query
        type: string
        description: List all the tales created using this image.
        required: false
      - name: folderId
        in: query
        type: string
        description: List all the tales created using this folder.
        required: false
      - name: text
        in: query
        description: Perform a full text search for a tale with matching name or description.
        type: string
      - name: limit
        in: query
        default: 50
        description: Result set size limit.
        type: integer
      - name: offset
        in: query
        default: 0
        description: Offset into result set.
        type: integer
      - name: sort
        in: query
        description: Field to sort the result set by.
        default: lowerName
        type: string
      - name: sortdir
        in: query
        description: 'Sort order: 1 for ascending, -1 for descending.'
        default: 1
        type: integer
        enum:
        - -1
        - 1
      responses:
        '200':
          description: A list of tales
          schema:
            type: array
            items:
              $ref: '#/definitions/tale'
    post:
      summary: Create a new tale
      description: Create a new tale from an image and a folder or a running tale
      operationId: demo.createTale
      tags:
      - tale
      produces:
      - application/json
      parameters:
      - name: imageId
        in: query
        type: string
        description: ID of an image used to build the tale.
        required: false
      - name: folderId
        in: query
        type: string
        description: ID of a folder used to build the tale.
        required: false
      - name: instanceId
        in: query
        type: string
        required: false
        description: ID of a running tale to save.
      - name: name
        in: query
        description: A user-friendly, short name of the tale
        type: string
        required: false
      - name: description
        in: query
        description: Description for the tale
        type: string
        required: false
      - name: config
        in: body
        required: false
        schema:
          $ref: '#/definitions/containerConfig'
      - name: public
        in: query
        type: boolean
        default: true
        description: If set to true, anyone can access the tale.
      responses:
        '200':
          description: A new tale
          schema:
            $ref: '#/definitions/tale'
        '400':
          description: Query parameter was invalid
        '403':
          description: Read access was denied on a folder or an image
  /tale/{id}:
    get:
      tags:
      - tale
      summary: Return a tale by ID.
      operationId: demo.getTaleByID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the tale to get.
        required: true
        type: string
      responses:
        '200':
          description: A selected tale.
          schema:
            $ref: '#/definitions/tale'
        '403':
          description: Read access was denied for the tale.
        '400':
          description: ID was invalid.
    put:
      tags:
      - tale
      summary: Edit a tale
      description: 'Modify mutable attributes of a tale, such as: name, description.'
      operationId: demo.updateTaleByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/tale'
        '403':
          description: Read/write access was denied for the tale.
        '400':
          description: ID was invalid.
      parameters:
      - name: id
        in: path
        description: ID of the tale to modify
        required: true
        type: string
      - name: name
        in: query
        description: Name of the tale
        type: string
      - name: description
        in: query
        description: Description for the tale
        type: string
      - name: tags
        type: array
        items:
          type: string
        description: A human readable labels for the Recipe.
        default: [latest]
        in: query
      - name: public
        in: query
        type: boolean
        required: False
        description: If set to true the Tale is accessible by anyone.
      - name: published
        in: query
        type: boolean
        required: false
        description: If set to true the Tale cannot be deleted or made unpublished.
      - name: config
        in: body
        schema:
          $ref: '#/definitions/containerConfig'
    delete:
      tags:
      - tale
      summary: Delete a tale by ID.
      description: Delete a selected tale provided that it is not published.
      operationId: demo.deleteTaleByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
        '403':
          description: Write access was denied for the tale.
        '400':
          description: ID was invalid.
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of the tale to remove
  /instance:
    get:
      tags:
      - instance
      summary: Returns all running instance that user has access to
      description: Results of the search can be filtered by specifying query arguments.
      operationId: demo.getInstances
      produces:
      - application/json
      parameters:
      - name: taleId
        in: query
        type: string
        description: List all the instances using this tale.
        required: false
      - name: text
        in: query
        description: Perform a full text search for an instance with matching name.
        type: string
      - name: limit
        in: query
        default: 50
        description: Result set size limit.
        type: integer
      - name: offset
        in: query
        default: 0
        description: Offset into result set.
        type: integer
      - name: sort
        in: query
        description: Field to sort the result set by.
        default: lowerName
        type: string
      - name: sortdir
        in: query
        description: 'Sort order: 1 for ascending, -1 for descending.'
        default: 1
        type: integer
        enum:
        - -1
        - 1
      responses:
        '200':
          description: A list of instances
          schema:
            type: array
            items:
              $ref: '#/definitions/instance'
    post:
      summary: Create a new instance
      description: Instantiate a tale
      operationId: demo.createInstance
      tags:
      - instance
      produces:
      - application/json
      parameters:
      - name: taleId
        in: query
        type: string
        description: ID of a tale used to create an instance.
        required: true
      - name: name
        in: query
        description: A user-friendly, short name of the tale
        type: string
        required: false
      responses:
        '200':
          description: A new instance
          schema:
            $ref: '#/definitions/instance'
        '400':
          description: Query parameter was invalid
        '403':
          description: Read access was denied on a tale
  /instance/{id}:
    get:
      tags:
      - instance
      summary: Return an instance by ID.
      operationId: demo.getInstanceByID
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of the instance to get.
        required: true
        type: string
      responses:
        '200':
          description: A selected instance.
          schema:
            $ref: '#/definitions/instance'
        '403':
          description: Read access was denied for the tale.
        '400':
          description: ID was invalid.
    delete:
      tags:
      - instance
      summary: Delete an instance by ID.
      operationId: demo.deleteInstanceByID
      produces:
      - application/json
      responses:
        '200':
          description: Success
        '403':
          description: Write access was denied for the instance.
        '400':
          description: ID was invalid.
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of the instance to remove
  /repository/lookup:
    get:
      tags:
      - repository
      summary: Create data mapping to an external repository.
      description: Given a list of external data identifiers, returns mapping to specific repository along with a basic metadata, such as size, name.
      operationId: demo.getRepoLookup
      produces:
      - application/json
      responses:
        '200':
          description: A list of data mappings.
          schema:
            type: array
            items:
              $ref: '#/definitions/dataMap'
      parameters:
      - name: dataId
        in: query
        description: List of external datasets identificators.
        required: true
        type: array
        items:
          type: string
  /folder/register:
    post:
      tags:
      - folder
      summary: Create a folder containing references to an external data.
      description: Register an external data as files and folders provided by a dataMap object.
      operationId: demo.createFolderFromData
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/folder'
        '403':
          description: Write access denied for parent collection.
        '400':
          description: Invalid parentId
      parameters:
      - name: parentId
        in: query
        required: true
        type: string
        description: The ID of the folder's parent.
      - name: name
        in: query
        required: true
        type: string
        description: Name of the folder.
      - name: parentType
        in: query
        required: false
        type: string
        description: Type of the folder's parent.
        enum:
          - collection
          - folder
          - user
      - name: public
        in: query
        type: boolean
        default: false
        description: >
          Whether the folder should be publicly visible. By default, inherits the value
          from parent folder, or in the case of user or collection parentType, defaults to False.
      - name: dataMap
        in: body
        description: A list of data mappings.
        schema:
          type: array
          items:
            $ref: '#/definitions/dataMap'
